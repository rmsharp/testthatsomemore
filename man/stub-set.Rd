% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stub.R
\name{stub<-}
\alias{stub<-}
\title{Stub the environment of a closure.}
\usage{
stub(fn, key, character.only = FALSE) <- value
}
\arguments{
\item{fn}{function. The function to stub.}

\item{key}{character. The variable/key in the closure to stub away. One
can also specify the name (without quoting it, using non-standard
evaluation).}

\item{character.only}{logical. As with the \code{character.only}
parameter of \code{base::library}, this will not use non-standard
evaluation for \code{key} if set to \code{TRUE}. The default is
\code{FALSE}.}

\item{value}{ANY. The new value of the stubbed key.}
}
\description{
When testing functions, sometimes we would like to not use certain
downstream methods that get called by that function. For example, if
we are testing an HTTP library, we may not want to make actual HTTP calls.
We can "stub" away the functions in our main function so they perform
a less complex but functionally similar behavior.
}
\examples{
fn <- function() { cat(paste0('a', 'b')) }
stub(fn, 'paste0') <- paste
fn() # Will print "a b" instead of "ab"
stub(fn, paste0) <- paste # This also works.

stubbed_key <- 'paste0'
stub(fn, stubbed_key, character.only = TRUE) <- paste
# We need to use character.only = TRUE for the above meta-programming to work
}
