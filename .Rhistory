library(testthatsomemore)
pretend_now_is(Sys.time() + as.difftime(1, units = "days"), {
cat("It's UNIX time ", Sys.time(), ", tomorrow!\n", sep = "")
})
Sys.time()
#' (or \code{-} in the case of "ago").
#'
#' @param time Date or POSIXct or character. For example,
#'   \code{Sys.time() + as.difftime(1, units = "days")} or
#'   \code{"1 day from now"}.
#' @param expr expression. The expression to evaluate while pretending
#'   the current time is \code{time}.
#' @return the value of \code{expr}.
#' @export
#' @examples
pretend_now_is(Sys.time() + as.difftime(1, units = "days"), {
cat("It's UNIX time ", format(Sys.time(), "%Y-%m-%d HH:MM:SS"), tomorrow!\n", sep = "")
})
#'
#' now <- Sys.time()
#' pretend_now_is("10 minutes from now", {
#'   stopifnot(all.equal(
#'    as.integer(as.difftime(Sys.time() - now, units = "minutes")),
#'    10))
#' })
pretend_now_is <- function(time, expr) {
time <- parse_time(time)
eval.parent(substitute({
testthatsomemore::package_stub("base", "Sys.Date", function() as.Date(time),
testthatsomemore::package_stub("base", "date", function() format(time, "%a %b %d %H:%M:%S %Y"),
testthatsomemore::package_stub("base", "Sys.time", function() time, {
expr
})))}))
}
parse_time <- function(time) {
UseMethod("parse_time")
}
parse_time.POSIXct <- function(time) {
time
}
parse_time.Date <- function(time) {
as.POSIXct(time)
}
parse_time.character <- function(time) {
strdate::strdate(time)
}
parse_time.default <- function(time) {
stop("Time provided to ", crayon::red("testthatsomemore::pretend_now_is"),
" is in an invalid format. Must be a ", sQuote("POSIXct"), ", ",
sQuote("Date"), ", or ", sQuote("character"), ".", call. = FALSE)
}
pretend_now_is(Sys.time() + as.difftime(1, units = "days"), {
cat("It's UNIX time ", format(Sys.time(), "%Y-%m-%d HH:MM:SS"), tomorrow!\n", sep = "")
})
format(Sys.time(), "%Y-%m-%d HH:MM:SS")
?format
pretend_now_is(Sys.time() + as.difftime(1, units = "days"), {
cat("It's UNIX time ", format(Sys.time(), "%Y-%m-%d HH:MM:SS %Z"), " tomorrow!\n", sep = "")
})
now <- Sys.time()
pretend_now_is("10 minutes from now", {
stopifnot(all.equal(
as.integer(as.difftime(Sys.time() - now, units = "minutes")),
10))
})
?sapply
??is
?is
?setNames
getFromNamespace
?getFromNamespace
?tense
?list2env
library(testthatsomemore)
library(testthatsomemore)
describe("parse_time", {
describe("invalid inputs", {
test_that("it errors when an invalid time format is given", {
expect_error(parse_time(10), "invalid format")
})
test_that("it errors on invalid character inputs", {
expect_error(parse_time("foo seconds ago"), "Could not parse")
})
})
test_that("it leaves POSIXct alone", {
expect_equal(parse_time(Sys.time()), Sys.time())
})
test_that("it leaves Date less alone", {
expect_equal(parse_time(Sys.Date()), as.POSIXct(Sys.Date()))
})
test_that("it can parse date strings", {
expect_equal(as.Date(parse_time("1 day from now")),
as.Date(strdate("1 day from now")))
})
})
?describe
library(testthat)
describe("parse_time", {
describe("invalid inputs", {
test_that("it errors when an invalid time format is given", {
expect_error(parse_time(10), "invalid format")
})
test_that("it errors on invalid character inputs", {
expect_error(parse_time("foo seconds ago"), "Could not parse")
})
})
test_that("it leaves POSIXct alone", {
expect_equal(parse_time(Sys.time()), Sys.time())
})
test_that("it leaves Date less alone", {
expect_equal(parse_time(Sys.Date()), as.POSIXct(Sys.Date()))
})
test_that("it can parse date strings", {
expect_equal(as.Date(parse_time("1 day from now")),
as.Date(strdate("1 day from now")))
})
})
debug(parse_time)
parse_time(10)
parse_time(10)
function(time) {
UseMethod("parse_time")
}
test_that("it errors when an invalid time format is given", {
expect_error(parse_time(10), "invalid format")
})
test_that("it errors on invalid character inputs", {
expect_error(parse_time("foo seconds ago"), "Could not parse")
})
library(testthatsomemore)
library(testthat)
describe("parse_time", {
describe("invalid inputs", {
test_that("it errors when an invalid time format is given", {
expect_error(parse_time(10), "invalid format")
})
test_that("it errors on invalid character inputs", {
expect_error(parse_time("foo seconds ago"), "Could not parse")
})
})
test_that("it leaves POSIXct alone", {
expect_equal(parse_time(Sys.time()), Sys.time())
})
test_that("it leaves Date less alone", {
expect_equal(parse_time(Sys.Date()), as.POSIXct(Sys.Date()))
})
test_that("it can parse date strings", {
expect_equal(as.Date(parse_time("1 day from now")),
as.Date(strdate("1 day from now")))
})
})
?parse_time
